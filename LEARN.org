* Explored
* To explore
** Why do I have to use ~String::from~ for string literals?

It seems to work when you remove ~String::from~, but the tree node is then of type ~&str~, not ~String~. You can't mix the two, as the compiler generates an error. Like this:

#+BEGIN_EXAMPLE
error[E0308]: mismatched types
 --> src/main.rs:9:37
  |
9 |         children: vec![Tree {value: String::from("child"), children: vec![]},
  |                                     ^^^^^^^^^^^^^^^^^^^^^
  |                                     |
  |                                     expected `&str`, found `String`
  |                                     help: consider borrowing here: `&String::from("child")`
#+END_EXAMPLE

Looks like I need to read up on the difference between `&str` and `String`.
