* Learned
** Why do I have to use ~String::from~ for string literals?

It seems to work when you remove ~String::from~, but the tree node is then of type ~&str~, not ~String~. You can't mix the two, as the compiler generates an error. Like this:

#+BEGIN_EXAMPLE
error[E0308]: mismatched types
 --> src/main.rs:9:37
  |
9 |         children: vec![Tree {value: String::from("child"), children: vec![]},
  |                                     ^^^^^^^^^^^^^^^^^^^^^
  |                                     |
  |                                     expected `&str`, found `String`
  |                                     help: consider borrowing here: `&String::from("child")`
#+END_EXAMPLE

So ~String::from~ actually returns a ~String~, while the type of string literals is ~&str~. The difference is that ~String~ is a potentially mutable string that has a length and a capacity (so similar to a ~StringBuffer~ or ~StringBuilder~ in Java), whereas ~&str~ is the type of /immutable string slices/.

** Generic function syntax

The declaration of ~print_tree~ has to be:

#+BEGIN_SRC rust
fn print_tree<T: std::fmt::Display>(t: &Tree<T>) { ... }
#+END_SRC

Rather than the one I tried first:
#+BEGIN_SRC rust
fn print_tree<T>(t: &Tree<T>) { ... }
#+END_SRC

This makes sense. Because I call ~println!~ on values of type T within the function, we need to tell it “this function accepts trees of /printable/ items”, rather than “accepts arbitrary trees”. Traits start to smell like Haskell type classes.

** Mixing peekable iterators with ~for … in~

You can’t. Instead of:

#+BEGIN_SRC rust
  let mut it = coll.iter().peekable(); // needs to be mut

  for elem in it {
      do_something(elem);
      do_something_else(it.peek()); // doesn’t compile
  }
  // …
#+END_SRC

I needed to convert the loop to a ~while~:

#+BEGIN_SRC rust
  while let Some(elem) = it.next() {
      do_something(elem);
      do_something_else(it.peek()); // kosher
  }
  // …
#+END_SRC

The error originating from the first snippet is:
#+BEGIN_EXAMPLE
error[E0382]: borrow of moved value: `it`
  --> src/main.rs:15:15
   |
10 |     let mut it = t.children.iter().peekable();
   |         ------ move occurs because `it` has type `Peekable<std::slice::Iter<'_, Tree<T>>>`, which does not implement the `Copy` trait
...
13 |     for child in it {
   |                  -- `it` moved due to this implicit call to `.into_iter()`
14 |     // while let Some(child) = it.next() {
15 |         match it.peek() {
   |               ^^^^^^^^^ value borrowed here after move
   |
note: `into_iter` takes ownership of the receiver `self`, which moves `it`
#+END_EXAMPLE

I need to meditate on it some more.

** Extending lifetime

This doesn’t work:

#+BEGIN_SRC rust
for line in stdin.lock().lines() {
    append_path(&mut t, &line.unwrap());
}
#+END_SRC

It’s intuitively obvious why. On each iteration, ~line~ lives only as long as the ~for~ loop’s inner block, so we need to extend the string’s lifetime somehow. (Removing the borrow from ~line.unwrap()~ results in a type mismatch.)

It’s unclear to me whether there exists a general approach to this. The compiler suggests
“consider using a ~let~ binding to create a longer lived value”, but in this particular case, it wouldn’t help either. So I ended up putting all the lines in a long-lived vector first (which makes
additional sense in my case: the vector can be sorted before passing its elements to ~append_path~, in
case the input is not sorted already).

* To explore
** Traits
** Lifetimes

The signature of ~append_path~ turned out to require an explicit lifetime declaration. I’ve read the relevant section of the Book (10.3) but I don’t fully grok it yet.

** How to test functions that print stuff?

I.e., what is the Rust equivalent of Clojure’s ~with-out-str~?
